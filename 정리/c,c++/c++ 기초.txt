//:주석(설명,역할,코드로 인식X  | 1줄 주석) | 메모나 표시가능 
\n:개행문자(아래로 커서 한칸이동)

#:전처리기(버츄얼 스튜디오에서 쓰는 전처리기 | 전처리기에 작성한 코드를 먼저처리)
(1)define(내가 지정한 구문을 특정숫자로 치환)

표준라이브러리
#include = 다른기능을 포함시킬 때 사용(복사붙어넣기와 같음)
#include <stdio.h> = 표준 입출력함수 기능

=======================================비주얼 스튜디오 단축키=======================================
1.Ctrl + k or c = 주석
2.Ctrl + k or u = 주석 헤제
3.Alt Drag = 원하는 부분만 드래그

-디버깅 단축키
1.F5 = 디버깅 시작,다음 중단점까지 코드실행
2.F9 = 중단점 생성 및 헤제(실행하기 직전)
3.F10 = 디버깅 중, 구문 수행
4.F11 = 디버깅 중, 한단계씩 코드실행
5.F12 = 선언 또는 정의 위치로 이동
6.Shift + F5 = 디버깅 중, 디버깅 종료

=======================================데이터=======================================
Bit(비트) : 0 or 1(거짓,참)
Byte(바이트) : 8it(알파벳,숫자 한 개) | 수256가지 표현가능
KB(킬로바이트) : 1,024Byte(몇 개의 문단) |
MB(메가바이트) : 1,024KB(1분 길이의 MP3 노래) |
GB(기가바이트) : 1,024MB(30분 길이의 HD 영화) |
TB(테라바이트) : 1,024GB(약 200편의 FHD 영화) |
(십진수)

=======================================자료형=======================================
(정수형,실수형으로 나뉨)
자료형 = 데이터타입(데이터가 어떤역할인지 설명해주는것)

정수:1,2,3,4,5....
실수:1.1,1.2,1.3,1.4,1.5....

데이터가 넘을시에 데이터가 짤림
(단위 : Byte)
void = 반환타입이 없을때 사용
정수형:  char(1 | 256가지), short(2 | 65536가지),int(4 | 4294967296가지), long(4 | 4294967296가지), long long(8 | 18446744073709551616가지) | (가장 대표적인것들)
실수형: float(4), double(8) | (가장 대표적인것들)
 예시 | (자료형) (변수명) = (정수,실수)

unsigned = 양수만 표현하고 싶을 때 씀(1Byte,정수,양의 정수만 | 아닐수도) 예: unsigned char i = 2 (0~255 | 1Byte) MSB적용X
signed = 양수,음수를 포현할 때 씀(안적어도 돼지만 구분용 | 초기값) (-128 ~ 0 ~ 127 | 1Byte)

(정수형과 실수형은 표현방식이 다름 | 중요)
(정수는 정수끼리, 실수는 실수끼리 연산하되, 두 표현방식의 피 연산자가 연산될 경우 명시적으로 변환)
예 : float f = 10.2415f + (float)20 (실수표현 체계의 20으로 변환 | 명시적으로 표시)

-모든것은 해석에따라 달라진다

-------------------------------------------정수형 자료형-------------------------------------------
MSB:양수,음수를 표현하는 최상위부호 비트를 일컷는 말(1:음수,0:양수)

-------------------------------------------실수형 자료형-------------------------------------------
-부동소수점으로 표현
(실수 표현방식은 정밀도에 의존함)

=======================================연산자=======================================
연산자: 연산을 명령하는 구문

피연산자 = 연산의 대상이돼는 데이터

; = 컴퓨터는 세미콜론을 기준으로 끊어서 구분함

산술 연산자: +, -, *, /, %, += 등(수학적 계산이 필요한 연산자)
/ : 정수 or 실수에 따라서 계산결과가 정수의 나눗셈,실수의 나눗셈 두가지로 나뉜다.
% : 피연산자가 모두 정수일 때에만 사용가능(모듈러스 연산자, 나머지 연산자)

-상수
f = 실수형의 데이터타입을 4byte의 실수타입으로 봄(float)
. = 실수형의 데이터타입을 8byte의 실수타입으로 봄(double)

증감 연산자 : ++ ,--(피연산자가 누구냐 또는 연산자가 수행돼는 위치에 따라 개념과 순서가 달라짐)
++ = 다음단계로 증가시킴
-- = 전단계로 감소시킴
-후위 연산자로 사용하는 경우 연산자 우선순위가 가장 나중으로 밀림
-전위 연산자로 사용하는 경우 연산자 우선순위가 가장 앞으로 밀림

대입 연산자 : =

참 : 0이 아닌 값,주로 1  
거짓: 0 

논리 연산자 : !(역) ,&&(And) ,||(Or) (참과 거짓인 0과 1을 다루는 연산자(참과 거짓을 다루는 연산자))
! = 참을 거짓으로 거짓을 참으로 바꿈
&& = 양쪽의 조건이 모두 참이여야 참으로봄
|| = 양쪽의 조건중에 하나라도 참이면 참으로봄

논리 연산자 관련
-삼항 연산자: ?
-구문: if, else | switch,case

비교 연산자 : ==,!=,<,>,<=,>= (참 or 거짓으로 계산결과가 나옴)

삼항 연산자 : ?(조건이 참일경우 왼쪽코드를 실행, 거짓일경우 오른쪽 코드실행 | 가독성 떨어짐)

bool = 참과 거짓만 다룸

비트 연산자 : 쉬프트 | <<(2^n 배수),>>(2^n나눈 몫)비트 한칸밀기, (비트단위로 연산이 진행될때 사용되는 연산자)
(1)비트 곱 : & (모든비트끼리 자릿수 맞춰서 계산 | 0이 하나라도 있으면 그칸은 0 둘다 1이면 1)
(2)비트 합 : | (모든비트끼리 자릿수 맞춰서 계산 | 1이 하나라도 있으면 그칸은 1 둘다 0이면 0)
(3)xor : ^ (모든비트끼리 자릿수 맞춰서 계산 | 같으면 0 다르면 1)
(4)반전 : ~ (모든비트를 뒤집음 0은 1로, 1은 0로 | 반전)

=======================================if,else구문=======================================
if() = if가 참일경우 조건실행(만약)
else = if가 거짓일 경우에 조건실행(아니면)

=======================================switch구문=======================================
switch() = 조건과 일치하는 부분의 case를 실행시킴
default = switch구문에서 조건과 일치하는 case가 없을 때 실행시킴
brake = 경계를 표시할때 씀

=======================================변수=======================================
변수: 자료를담는 그릇

-변수의 종류
1.지역변수((함수,지역)괄호안에 선언돼어 있는변수를 통틀어부름) | 스택영역
2.전역변수((함수,지역)괄호밖에 선언돼어 있는변수를 통틀어부름) | 데이터 영역
3.정적변수 | 데이터 영역
4.외부변수 | 데이터 영역

-변수자체는 스택영역 or 데이터 영역 사용

---------------------------------------------정적변수---------------------------------------------
정적변수: 선언된 위치에서만 인식되는 변수
-static를붙임

---------------------------------------------외부변수---------------------------------------------
외부변수: 선언만하면 어디서든 사용할 수 있는변수(단 변수를 사용하는 위치에서만)
-extern를붙임
-초기값 설정X : extern 변수명;(이런변수가 있다는것만 선언) 

=======================================메모리 영역=======================================
1.스택영역(스택 자료구조의 형식을 띄움 | 후입선출 | 지역변수)
2.데이터 영역(프로그램 시작 시 생성,  프로그램 종료 시 헤제 | 전역변수,정적변수,외부변수)
3. 읽기 전용(코드, ROM)
4.힙 영역

=======================================함수=======================================
함수: 기능

모듈화: 기능 하나하나를 명확하게 구분하고 명확하게 쪼개는것

스택 메모리: 함수가 사용하는 공간

-------------------------------------------입출력 함수-------------------------------------------
printf() = 콘솔창에 내가 원하는 문자를 띄을 수 있음(치환문자 사용가능)

scanf() = 콘솔창으로 부터 입력을받음
-scanf_s()로 사용해야함
-입력한 정보를 받아서 정해진곳에 넣는다

-------------------------------------------재귀함수-------------------------------------------
재귀함수: 함수안에서 자기자신을 호출하게 만드는것(탈출조건 설정안할시에 무한루프에 빠져서 스택오버플로어 발생)
-함수호출이 많이 일어나기 때문에 많은계산 필요

-------------------------------------------치환문자-------------------------------------------
%d = 특정숫자 치환(정수)
%f = 특정숫자 치환(실수)

-------------------------------------------자료구조-------------------------------------------
자료구조: 어떠한 구조로 데이터를 다루고 효율적으로 관리하고 처리할것인가에 관한학문

-스택: 후입선출(먼저들어온게 가장 마지막에 마지막에 들어온게 먼저)
-큐: 선입선출(먼저들어온게 가장먼저 마지막에 들어온게 가장 마지막에)

=======================================반복문=======================================
for() : for(반복자 초기화 ; 반복자 조건 체크 ; 반복자 변경)
while() : while(조건체크)

continue = 뒤의코드를 읽지않고 반복자 변경 파트로 넘어감
break = 반복문종류

=======================================배열=======================================
배열: 변수를 묶어서 선언할 때 사용
-메모리가 연속적(불러올 때 번지를 잘못 입력하면 우연히 다른지역 변수에 들어가 오류를 일으킬수도 있음)
-배열의 이름은 배열의 시작 주소이다

-기본문법
int(자료형) iArray(변수명)[묶을개수] = {초기값설정 | 괄호를 비어두면 0 | 하나씩 설정가능}

-인덱스 접근: 배열로 묶은 변수에 접근할 때 사용
iArray(변수명)[지칭인덱스]
-지칭인덱스는 0부터 시작한다

=======================================구조체=======================================
구조체: 사용자 정의 자료형(자료형을 자기가 설계가능)
자료형: 데이터 타입
-주로 구조체는c와 c++문법과 같게 설정한다(c,c++둘다 작동가능하게)

-문법
typedef struct 별명
{


}자료형 이름;

-초기값 설정가능(중괄호를 사용하여)

sizeof = 데이터타입 확인가능
typedef = 데이터타입을 변환시킬 때
struct = 구조체

=======================================분할 구현=======================================
자료형 함수명(); = 이런함수가 있다는것을 선언

빌드과정: 컴파일(파일읽음) -> 링크(파일끼리 엮음)

-링크과정에서 겹치는 변수,함수가 있으면안됨(특정변수 제외)

=======================================포인터=======================================
포인터 = 주소를 가르키는 변수(포인터 변수)

포인터 변수의 데이터크기 = 32Bit운영체제를 사용한다면 4Byte 64Bit운영체제를 사용한다면 8Byte

nullptr = 포인터가 아무것도 가르키지 않을때 넣는값

자료형* 변수명 = 자신이 선언한 자료형의 변수의 주소를 가르키는 변수가됨(선언한 자료형은 그 자료형의 주소를 가르킴)
*변수명 = 저장 되어있는 주소값을 참조
&변수명 = 주소를 넘겨줄때 사용

포인터의 증가,증감은 자료형에 따라 맞춰진다

-------------------------------------------주의점-------------------------------------------
-정수형 자료와 실수형 자료는 표현방식이 다르기 때문에 주의
-포인터는 포인터가 접근할때 자신이 선언됐을때 사용된 자료형으로만 해석한다.
-자료형 = 해당 포인터에게 전달된 주소로 접근했을때 메모리공간의 해석

-------------------------------------------주소-------------------------------------------
주소의단위: Byte
주소를 표현하는 타입: 정수

-------------------------------------------포인터 배열-------------------------------------------
포인터의 선언된 자료형에 따라서 해석이 달라짐